1. 체크리스트 발표자료

-> 목적, 기능, 어려운 점, 구현 과정

- 구현 과정 및 어려운 점:

1-1. DB 구성(Postgresql) - 체크리스트 종류 / 체크리스트 종류별 문항 및 답변

1-2. Django Rest Framework - Rest api 구현 : Vue.js와의 연동을 위해

 - 체크리스트 구현에 용이하도록 쿼리셋을 만들고 테이블을 조인하는 과정에서 
	시간이 많이 들었다. 

-> 모델에서 테이블 조인은 시켜놓은 상태였지만, 체크리스트 종류 테이블의 아이디만 받아오는 형태였고
	원하는 바를 구현하기 위해서는 아이디와 종류명이 모두 필요했다.
	따라서 Rest api에서 체크리스트 테이블을 출력하는 url로 들어갔을 시 종류 데이터 
	안에 아이디와 종류명이 모두 들어가게 할 방법을 찾아야 했다.

해결 -> Rest api를 구현하기 위해서는 데이터를 직렬화 해주는 Serializer라는 것이 필요하다.
	외래키를 받는 테이블의 serializer에서 외래키를 제공하는 테이블의 serializer를 받는 테이블의
	serializer를 가져오도록 하고, read_only=True를 설정하면 
	rest api에서 외래키의 아이디와 이름이 모두 출력될 수 있도록 했다.

1-3. 웹페이지 화면 구현 :
- 체크리스트를 작성한 날짜가 보일 수 있도록 달력 표시
-> Vuetify에서는 v-data-picker를 통해 달력을 표시할 수 있게 지원한다. 
그런데 내가 처음에 vue 프로젝트를 만들면서 Vuetify 최신 버전을 추가했는데, 
그 버전이 아직 베타 버전이라서 v-data-picker를 지원하지 않았다.
그래서 결국 Vue.js와 Vuetify의 버전을 결국 2로 낮추는 방법을 택했고, 
달력 출력 문제는 해결되었지만 Vue와 Vuetify 모두 기존에 적용했던 최신버전과 다른 부분이 있어서
공부를 다시 하며 고쳐 나가야 했다.


- 작성하고자 하는 체크리스트 선택하도록 Select Box 구현, 
체크리스트 하나를 선택했을 시 그 리스트에 속한 문항들만 조회
-> 체크리스트 테이블에서 아이디를 갖고 있는 체크리스트 종류 테이블을 외래 키로 받도록 하고, 
1부터 시작하는 TitleFilterValue라는 필터링 함수를 만들어 아이디와 TitleFilterValue가 같을 시
그 아이디를 가지고 있는 문항들만 출력되도록 구현.

- Vuetify에서 지원하는 v-data-table을 이용해 문항, 답변, 비고란 구현

- Vue.js에서 제공하는 axios 함수를 통해 장고 rest api와 연동
-> rest api의 url을 활용하면 연동이 가능하다.
-> get 방식으로 체크리스트 데이터를 가져왔는데, 데이터들을 object 형태로 받아와서
반복문과 인덱싱을 통해 데이터가 출력되게 해야 했다.
-> 답변에 Radio box를 사용했기 때문에 true나 false로 값을 설정할 시 
예/아니오 둘 중 하나에 이미 체크가 되어있는 상태가 되어버렸다.
그래서 django 모델에서 답변 데이터가 null을 기본값으로 가지게 한 뒤 
axios put을 이용해 업데이트하는 방식으로 구현했다.